{"version":3,"sources":["codenames/app.cljs"],"mappings":";;;;;;;AAOA,AAACA;AAED,AAAA,AAAMC,AAAcC;AAApB,AACE,AAAMC,AAAa,AAACC,AAASF;AAA7B,AACE;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEmBG,AAAaF;AAFhC,AAKwB,AAACG,AAAOC,AAAY,AAAA,AAAAC,AAACC,AAAiBN;AAL9D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMuB,AAAA,AAAAK,AAAA,AAAAA,AAACE,AAAGP,AAAcD;AANzC,AAOuD,AAACS;;;;AAE5D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAEL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAQM,AAAA,AAAkB,AAAA,AAAMC;AAEnC,AAAKC,AACH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAMH,AAG8BI;AAEvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAIL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAOL,AAAA,AAAMC,AAAaC;AAAnB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACcA,AACE,AAACL,AAAME,AAAiB,AAACG,AAAAA,AAAAA,AAAKC,AAAAA;AAF9C,AAGoB,AAACC,AAAeF;AACjC,AAAA,AAAA,AAACG,AAAOL,AAAcE;;AAEzB,AAAA,AAAMI,AAAcC,AAAMC,AAAKN;AAA/B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAESK,AACeL,AACb,AAACL,AAAMD,AAAS,AAACM,AAAAA,AAAAA,AAAKC,AAAAA;AAJjC,AAKe,AAAChB,AAAOsB,AAA6BF;AALpD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAMyCC;;AAEzC,AAAA,AAAME,AAAcH,AAAMC,AAAKN;AAA/B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACcK,AACEb,AAEwBc,AACuB,AAAA,AAAMb,AAEjE,AAACgB,AAAIV,AAAYR;;AAErB,AAAA,AAAAmB,AAAMG;AAAN,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAaN;AAAb,AAAAO,AAAAD,AAAA,AAAA,AAAmBG;AAAnB,AACE,AAAAC,AAA0CD;AAA1CC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAOT;AAAP,AAAAa,AAAAJ,AAAA,AAAwBf;AAAxB,AACE,AAAI,AAAA,AAAAb,AAACE,AAAEgB,AAAOE;AAAd,AACGC,AAAaH,AAAMC,AAAKN;;AAD3B,AAEGI,AAAaC,AAAMC,AAAKN;;;AAE/B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKoB;AASL,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGWD,AACR,AAACE,AAAM,AAACb,AAAII,AAAK,AAAA,AAAA,AAAA1B,AAAaD;;AAEjC,AAAA,AAAMqC;AAAN,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAESC,AACP7C,AAAa8C,AACbL,AACF,AAAA,AAACM;;AAGJ,AAAA,AAAMC;AAAN,AACE,AAACL;;AAEH,AAAA,AAAuBM;AAAvB,AAAgC,AAACN","names":["cljs.core/enable-console-print!","codenames.app/seed-control","seed","current-seed","codenames.utils/shadow","codenames.utils/atom-input","cljs.core/reset!","codenames.state/state","cljs.core/deref","codenames.state.new_state","cljs.core._EQ_","codenames.state/random-seed","codenames.app/teams","codenames.app/card-base","codenames.style/grey","codenames.app/card-css","cljs.core.merge","codenames.style/elevation-low","codenames.app/team-button-base","codenames.app/team-buttons","codenames.app/team-button","team","codenames.style/teams","codenames.state/set-team","cljs.core.get_in","codenames.app/card-display","index","word","codenames.state/controlled-word-cursor","codenames.app/card-control","cljs.core.map","p__26547","vec__26548","cljs.core.nth","codenames.app/card","word-state","map__26551","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","codenames.app/word-grid-css","codenames.app/word-grid","cljs.core.doall","codenames.app/render-app","reagent.dom.render","codenames.style/base-css","codenames.state/seed-cursor","js/document.getElementById","codenames.app/init","codenames.app/start"],"sourcesContent":["(ns codenames.app\n  (:require [reagent.dom :as rd]\n            [reagent.core :as rc]\n            [codenames.state :as state :refer [state]]\n            [codenames.style :as style]\n            [codenames.utils :as u]))\n\n(enable-console-print!)\n\n(defn seed-control [seed]\n  (let [current-seed (u/shadow seed)]\n    (fn []\n      [:div\n       [:div \"Seed: \" [u/atom-input current-seed]\n        [:input {:type \"button\"\n                 :value \"Set\"\n                 :on-click #(reset! state/state (state/new-state @current-seed))\n                 :disabled (= @current-seed @seed)}]\n        [:input {:type \"button\" :value \"Random\" :on-click #(state/random-seed)}]]])))\n\n(def teams [:none :red :blue :assassin :neutral])\n\n(def card-base\n  {:box-sizing :border-box\n   :flex \"1 0 15%\"\n   :max-width \"17%\"\n   :min-width \"17%\"\n   :max-height \"15%\"\n   :min-height \"15%\"\n   :border-radius \"2px\"\n   :border (str \"1px solid \" (:200 style/grey))})\n\n(def card-css\n  (merge card-base {:display :flex\n                    :align-items :center\n                    :justify-content :center\n                    :font-size \"40px\"} style/elevation-low))\n\n(def team-button-base {:border-radius \"2px\"\n                       :padding \"6px 10px\"\n                       :cursor :pointer})\n\n(def team-buttons {:none {:team/shorthand \"X\"}\n                   :red {:team/shorthand \"R\"}\n                   :blue {:team/shorthand \"B\"}\n                   :assassin {:team/shorthand \"A\"}\n                   :neutral {:team/shorthand \"N\"}})\n\n\n(defn team-button [team]\n  [:div {:key team\n         :style (merge team-button-base (team style/teams))\n         :on-click #(state/set-team team)}\n   (get-in team-buttons [team :team/shorthand])])\n\n(defn card-display [index word team]\n  [:div\n   {:key index\n    :class [\"word-card\" team]\n    :style (merge card-css (team style/teams))\n    :on-click #(reset! state/controlled-word-cursor index)}\n   [:div {:class \"card-content\"} [:span  word]]])\n\n(defn card-control [index word team]\n  [:div {:key index\n         :style card-base}\n   [:div {:style {:padding-left \"10px\"\n                  :padding-top  \"5px\"}} word]\n   [:hr {:style {:border :none :height \"1px\" :background-color (:500 style/grey) :width \"95%\" :margin-top \"5px\"}}]\n   [:div {:style {:display :flex :flex-wrap :wrap :justify-content :space-around :align-content :center}}\n    (map team-button teams)]])\n\n(defn card [[index word-state]]\n  (let [{word :words/word team :words/team} word-state]\n    (if (= index @state/controlled-word-cursor)\n      [card-control index word team]\n      [card-display index word team])))\n\n(def word-grid-css\n  {:display :flex\n   :flex-wrap :wrap\n   :justify-content :space-around\n   :align-items :center\n   :align-content :space-around\n   :min-height \"95vh\"\n   :height \"95vh\"})\n\n(defn word-grid []\n  [:div\n   {:class [\"word-grid\"]\n    :style word-grid-css}\n   (doall (map card (:words/map @state)))])\n\n(defn render-app []\n  (rd/render\n   [:div\n    {:style style/base-css}\n    [seed-control state/seed-cursor]\n    [word-grid]]\n   (js/document.getElementById \"root\")))\n\n\n(defn init []\n  (render-app))\n\n(defn ^:dev/after-load start [] (render-app))"]}