{"version":3,"sources":["codenames/utils.cljs"],"mappings":";;;AAGA,AAAA,AAAME,AAAYC;AAAlB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAC,AAEmBE;AAFnB,AAGuB,AAACC,AAAOD,AAAM,AAAA,AAAAF;;;AAErC,AAAA,AAAMI,AAAQC;AAAd,AACE,AAAMC,AAAc,AAAA,AAAAP,AAACQ,AAASF;AACxBG,AAAc,AAAA,AAAAT,AAACQ,AAASF;AAD9B,AAEE,AAACI,AACA;;AACIC;AADJ,AAEG,AAAU,AAAA,AAAAX,AAAA,AAAAA,AAAaO,AAAeD;AAAtC;AAAA,AAA4C,AAAA,AAAAN,AAACI,AAAOG,AAAeD;;AAAM,AAAA,AAAAN,AAACI,AAAOK,AAAeH;;;AAFnG,AAAAN,AAGIS;;AACAE,AAAGC;AAJP,AAIU,AAACR,AAAOK,AAAcG;;AAA5BD,AAAGC;;;AAAHD;;AAAAA,AAAGC;;;;;;;;AALR;;AAQJ","names":["cljs.core/deref","p1__28188#","codenames.utils/atom-input","value","cljs.core/reset!","codenames.utils/shadow","atom","initial-value","reagent.core.atom","current-value","reagent.core/cursor","_k","v"],"sourcesContent":["(ns codenames.utils\n  (:require [reagent.core :as rc]))\n\n(defn atom-input [value]\n  [:input {:type \"text\"\n           :value @value\n           :on-change #(reset! value (-> % .-target .-value))}])\n\n(defn shadow [atom]\n  (let [initial-value (rc/atom @atom)\n        current-value (rc/atom @atom)]\n    (rc/cursor\n     (fn\n       ([_k]\n        (when-not (identical? @initial-value @atom) (reset! initial-value @atom) (reset! current-value @atom))\n        @current-value)\n       ([_k v] (reset! current-value v)))\n     [])))\n\n(comment\n  (def outer-a (rc/atom 5))\n  (def inner-a (shadow outer-a))\n  @outer-a\n  @inner-a\n  (swap! inner-a inc)\n  (reset! outer-a 2))"]}